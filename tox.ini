# Copyright 2024 Canonical Ltd.
# See LICENSE file for licensing details.

[flake8]
max-line-length = 100

[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = fmt, integration, lint, unit, update-requirements

[vars]
src_path = {toxinidir}/src/
tst_path = {toxinidir}/tests/
all_path = {[vars]src_path} {[vars]tst_path}

[testenv]
setenv =
    PYTHONPATH = {toxinidir}:{[vars]src_path}
    PYTHONBREAKPOINT=ipdb.set_trace
    PY_COLORS=1
passenv =
    PYTHONPATH

[testenv:update-requirements]
allowlist_externals =
    bash
    find
    pip-compile
    xargs
commands =
    ; we must preserve the order of compilation, since each *.in file depends on some *.txt file.
    ; For example, requirements-unit.in depends on requirements.txt and we must compile first
    ; requirements.txt to ensure that requirements-unit.txt get the same dependency as the requirements.txt
    bash -c 'for pattern in "requirements.in" "requirements-fmt.in" "requirements*.in"; do find . -type f -name "$pattern" -exec bash -c "cd \$(dirname "{}") && pip-compile --resolver=backtracking \$(basename "{}")" \;; done'

deps =
    pip-tools
description = Update requirements files by executing pip-compile on all requirements*.in files, including those in subdirs.

[testenv:fmt]
allowlist_externals = isort, black
commands =
    isort {[vars]all_path}
    black {[vars]all_path}
deps =
    -r requirements-fmt.txt
description = Apply coding style standards to code

[testenv:lint]
allowlist_externals = codespell, isort, black
commands =
    # uncomment the following line if this charm owns a lib
    # codespell {[vars]lib_path}
    codespell {toxinidir}/. --skip {toxinidir}/./.git \
      --skip {toxinidir}/./.tox \
      --skip {toxinidir}/./build \
      --skip {toxinidir}/./lib \
      --skip {toxinidir}/./venv \
      --skip {toxinidir}/./.mypy_cache \
      --skip {toxinidir}/.poc \
      --skip {toxinidir}/./icon.svg --skip *.json.tmpl
    # pflake8 wrapper supports config from pyproject.toml
    pflake8 {[vars]all_path}
    isort --check-only --diff {[vars]all_path}
    black --check --diff {[vars]all_path}
deps =
    -r requirements-lint.txt
description = Check code against coding style standards

[testenv:unit]
commands =
    coverage run --source={[vars]src_path} \
    -m pytest {[vars]tst_path}/unit -v --tb native -s {posargs}
    coverage report
deps =
    -r requirements-unit.txt
description = Run unit tests

[testenv:integration]
commands =
    pip install .
    pytest {[vars]tst_path}/integration -v --tb native -s {posargs}
deps =
    -r requirements-unit.txt
description = Run integration tests
