# Note: The trigger for GPU tests is based off the name of this workflow.
#       If we rename this workflow, update the GPU test trigger as well.
name: Build and test Snap

on:
  workflow_call:
  workflow_dispatch:

env:
  SNAP_ARTIFACT_NAME: dss-snap
  SNAP_FILE: dss.snap
  # Path to the home dir of the strictly confined data-science-stack snap
  DSS_KUBECONFIG_PATH: ~/snap/data-science-stack/x1/.dss/config

jobs:
  build-snap:
    name: Build the snap
    runs-on: ubuntu-22.04
    outputs:
      snap-file: ${{ steps.snapcraft.outputs.snap }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - uses: snapcore/action-build@v1.3.0
      id: snapcraft
      with:
        # Use a deterministic file name, so we can easily reference it later
        snapcraft-args: "-o ${{ env.SNAP_FILE }}"

    - uses: actions/upload-artifact@v4
      id: upload-snap-artifact
      with:
        name: ${{ env.SNAP_ARTIFACT_NAME }}
        path: ${{ steps.snapcraft.outputs.snap }}

  test:
    name: Test the snap
    runs-on: ubuntu-22.04
    needs:
      - build-snap
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      id: download-snap-artifact
      with:
        name: ${{ env.SNAP_ARTIFACT_NAME }}

    - name: Install the snap locally
      run: |
        # use --dangerous so we trust the snap even though it doesn't have signatures
        sudo snap install ${{ env.SNAP_FILE }} --dangerous
        sudo snap alias data-science-stack.dss dss

    - name: Set up Microk8s
      uses: balchua/microk8s-actions@v0.3.2
      with:
        channel: '1.28/stable'
        addons: '["hostpath-storage"]'

    - name: Install dependencies
      run: python3 -m pip install tox

    - name: Export kubeconfig where strict snap can access it
      run: |
        mkdir -p $(dirname ${{ env.DSS_KUBECONFIG_PATH }})
        cp ~/.kube/config ${{ env.DSS_KUBECONFIG_PATH }}

    - name: Test dss snap
      run: |
        tox -e dss-cli
